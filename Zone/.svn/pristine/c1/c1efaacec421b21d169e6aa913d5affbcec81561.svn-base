<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cunyun.zone.server.mapper.CyTwitterMapper" >
  <resultMap id="BaseResultMap" type="cunyun.zone.server.entity.CyTwitter" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="twitter_id" property="twitterId" jdbcType="VARCHAR" />
    <result column="uid" property="uid" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="twitter_type" property="twitterType" jdbcType="VARCHAR" />
    <result column="read_rule" property="readRule" jdbcType="VARCHAR" />
    <result column="reply_rule" property="replyRule" jdbcType="VARCHAR" />
    <result column="has_atts" property="hasAtts" jdbcType="VARCHAR" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
    <result column="topic_class" property="topicClass" jdbcType="VARCHAR" />
    <result column="vote_can_add_option" property="voteCanAddOption" jdbcType="INTEGER" />
    <result column="vote_multiple_choice" property="voteMultipleChoice" jdbcType="INTEGER" />
    <result column="push_status" property="pushStatus" jdbcType="INTEGER" />
    <result column="icon" property="icon" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cunyun.zone.server.entity.CyTwitterWithBLOBs" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
    <result column="show_content" property="showContent" jdbcType="LONGVARCHAR" />
    <result column="from_url" property="fromUrl" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, twitter_id, uid, title, twitter_type, read_rule, reply_rule, has_atts, created_time, 
    topic_class, vote_can_add_option, vote_multiple_choice, push_status, icon
  </sql>
  <sql id="Blob_Column_List" >
    content, show_content, from_url
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="cunyun.zone.server.entity.CyTwitterExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cy_twitter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cunyun.zone.server.entity.CyTwitterExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cy_twitter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cy_twitter
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from cy_twitter
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cunyun.zone.server.entity.CyTwitterExample" >
    delete from cy_twitter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cunyun.zone.server.entity.CyTwitterWithBLOBs" >
    insert into cy_twitter (id, twitter_id, uid, 
      title, twitter_type, read_rule, 
      reply_rule, has_atts, created_time, 
      topic_class, vote_can_add_option, vote_multiple_choice, 
      push_status, icon, content, 
      show_content, from_url)
    values (#{id,jdbcType=INTEGER}, #{twitterId,jdbcType=VARCHAR}, #{uid,jdbcType=VARCHAR}, 
      #{title,jdbcType=VARCHAR}, #{twitterType,jdbcType=VARCHAR}, #{readRule,jdbcType=VARCHAR}, 
      #{replyRule,jdbcType=VARCHAR}, #{hasAtts,jdbcType=VARCHAR}, #{createdTime,jdbcType=TIMESTAMP}, 
      #{topicClass,jdbcType=VARCHAR}, #{voteCanAddOption,jdbcType=INTEGER}, #{voteMultipleChoice,jdbcType=INTEGER}, 
      #{pushStatus,jdbcType=INTEGER}, #{icon,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR}, 
      #{showContent,jdbcType=LONGVARCHAR}, #{fromUrl,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cunyun.zone.server.entity.CyTwitterWithBLOBs" >
    insert into cy_twitter
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="twitterId != null" >
        twitter_id,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="twitterType != null" >
        twitter_type,
      </if>
      <if test="readRule != null" >
        read_rule,
      </if>
      <if test="replyRule != null" >
        reply_rule,
      </if>
      <if test="hasAtts != null" >
        has_atts,
      </if>
      <if test="createdTime != null" >
        created_time,
      </if>
      <if test="topicClass != null" >
        topic_class,
      </if>
      <if test="voteCanAddOption != null" >
        vote_can_add_option,
      </if>
      <if test="voteMultipleChoice != null" >
        vote_multiple_choice,
      </if>
      <if test="pushStatus != null" >
        push_status,
      </if>
      <if test="icon != null" >
        icon,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="showContent != null" >
        show_content,
      </if>
      <if test="fromUrl != null" >
        from_url,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="twitterId != null" >
        #{twitterId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="twitterType != null" >
        #{twitterType,jdbcType=VARCHAR},
      </if>
      <if test="readRule != null" >
        #{readRule,jdbcType=VARCHAR},
      </if>
      <if test="replyRule != null" >
        #{replyRule,jdbcType=VARCHAR},
      </if>
      <if test="hasAtts != null" >
        #{hasAtts,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="topicClass != null" >
        #{topicClass,jdbcType=VARCHAR},
      </if>
      <if test="voteCanAddOption != null" >
        #{voteCanAddOption,jdbcType=INTEGER},
      </if>
      <if test="voteMultipleChoice != null" >
        #{voteMultipleChoice,jdbcType=INTEGER},
      </if>
      <if test="pushStatus != null" >
        #{pushStatus,jdbcType=INTEGER},
      </if>
      <if test="icon != null" >
        #{icon,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="showContent != null" >
        #{showContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="fromUrl != null" >
        #{fromUrl,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cunyun.zone.server.entity.CyTwitterExample" resultType="java.lang.Integer" >
    select count(*) from cy_twitter
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update cy_twitter
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.twitterId != null" >
        twitter_id = #{record.twitterId,jdbcType=VARCHAR},
      </if>
      <if test="record.uid != null" >
        uid = #{record.uid,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.twitterType != null" >
        twitter_type = #{record.twitterType,jdbcType=VARCHAR},
      </if>
      <if test="record.readRule != null" >
        read_rule = #{record.readRule,jdbcType=VARCHAR},
      </if>
      <if test="record.replyRule != null" >
        reply_rule = #{record.replyRule,jdbcType=VARCHAR},
      </if>
      <if test="record.hasAtts != null" >
        has_atts = #{record.hasAtts,jdbcType=VARCHAR},
      </if>
      <if test="record.createdTime != null" >
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.topicClass != null" >
        topic_class = #{record.topicClass,jdbcType=VARCHAR},
      </if>
      <if test="record.voteCanAddOption != null" >
        vote_can_add_option = #{record.voteCanAddOption,jdbcType=INTEGER},
      </if>
      <if test="record.voteMultipleChoice != null" >
        vote_multiple_choice = #{record.voteMultipleChoice,jdbcType=INTEGER},
      </if>
      <if test="record.pushStatus != null" >
        push_status = #{record.pushStatus,jdbcType=INTEGER},
      </if>
      <if test="record.icon != null" >
        icon = #{record.icon,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.showContent != null" >
        show_content = #{record.showContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.fromUrl != null" >
        from_url = #{record.fromUrl,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update cy_twitter
    set id = #{record.id,jdbcType=INTEGER},
      twitter_id = #{record.twitterId,jdbcType=VARCHAR},
      uid = #{record.uid,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      twitter_type = #{record.twitterType,jdbcType=VARCHAR},
      read_rule = #{record.readRule,jdbcType=VARCHAR},
      reply_rule = #{record.replyRule,jdbcType=VARCHAR},
      has_atts = #{record.hasAtts,jdbcType=VARCHAR},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      topic_class = #{record.topicClass,jdbcType=VARCHAR},
      vote_can_add_option = #{record.voteCanAddOption,jdbcType=INTEGER},
      vote_multiple_choice = #{record.voteMultipleChoice,jdbcType=INTEGER},
      push_status = #{record.pushStatus,jdbcType=INTEGER},
      icon = #{record.icon,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=LONGVARCHAR},
      show_content = #{record.showContent,jdbcType=LONGVARCHAR},
      from_url = #{record.fromUrl,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update cy_twitter
    set id = #{record.id,jdbcType=INTEGER},
      twitter_id = #{record.twitterId,jdbcType=VARCHAR},
      uid = #{record.uid,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      twitter_type = #{record.twitterType,jdbcType=VARCHAR},
      read_rule = #{record.readRule,jdbcType=VARCHAR},
      reply_rule = #{record.replyRule,jdbcType=VARCHAR},
      has_atts = #{record.hasAtts,jdbcType=VARCHAR},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      topic_class = #{record.topicClass,jdbcType=VARCHAR},
      vote_can_add_option = #{record.voteCanAddOption,jdbcType=INTEGER},
      vote_multiple_choice = #{record.voteMultipleChoice,jdbcType=INTEGER},
      push_status = #{record.pushStatus,jdbcType=INTEGER},
      icon = #{record.icon,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cunyun.zone.server.entity.CyTwitterWithBLOBs" >
    update cy_twitter
    <set >
      <if test="twitterId != null" >
        twitter_id = #{twitterId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null" >
        uid = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="twitterType != null" >
        twitter_type = #{twitterType,jdbcType=VARCHAR},
      </if>
      <if test="readRule != null" >
        read_rule = #{readRule,jdbcType=VARCHAR},
      </if>
      <if test="replyRule != null" >
        reply_rule = #{replyRule,jdbcType=VARCHAR},
      </if>
      <if test="hasAtts != null" >
        has_atts = #{hasAtts,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="topicClass != null" >
        topic_class = #{topicClass,jdbcType=VARCHAR},
      </if>
      <if test="voteCanAddOption != null" >
        vote_can_add_option = #{voteCanAddOption,jdbcType=INTEGER},
      </if>
      <if test="voteMultipleChoice != null" >
        vote_multiple_choice = #{voteMultipleChoice,jdbcType=INTEGER},
      </if>
      <if test="pushStatus != null" >
        push_status = #{pushStatus,jdbcType=INTEGER},
      </if>
      <if test="icon != null" >
        icon = #{icon,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="showContent != null" >
        show_content = #{showContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="fromUrl != null" >
        from_url = #{fromUrl,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cunyun.zone.server.entity.CyTwitterWithBLOBs" >
    update cy_twitter
    set twitter_id = #{twitterId,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      twitter_type = #{twitterType,jdbcType=VARCHAR},
      read_rule = #{readRule,jdbcType=VARCHAR},
      reply_rule = #{replyRule,jdbcType=VARCHAR},
      has_atts = #{hasAtts,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      topic_class = #{topicClass,jdbcType=VARCHAR},
      vote_can_add_option = #{voteCanAddOption,jdbcType=INTEGER},
      vote_multiple_choice = #{voteMultipleChoice,jdbcType=INTEGER},
      push_status = #{pushStatus,jdbcType=INTEGER},
      icon = #{icon,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR},
      show_content = #{showContent,jdbcType=LONGVARCHAR},
      from_url = #{fromUrl,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cunyun.zone.server.entity.CyTwitter" >
    update cy_twitter
    set twitter_id = #{twitterId,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      twitter_type = #{twitterType,jdbcType=VARCHAR},
      read_rule = #{readRule,jdbcType=VARCHAR},
      reply_rule = #{replyRule,jdbcType=VARCHAR},
      has_atts = #{hasAtts,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      topic_class = #{topicClass,jdbcType=VARCHAR},
      vote_can_add_option = #{voteCanAddOption,jdbcType=INTEGER},
      vote_multiple_choice = #{voteMultipleChoice,jdbcType=INTEGER},
      push_status = #{pushStatus,jdbcType=INTEGER},
      icon = #{icon,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>